name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

env:
  PYTHON_VERSION: '3.8'
  NODE_VERSION: '18'

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install pre-commit
    
    - name: Run pre-commit hooks
      run: pre-commit run --all-files
    
    - name: Run Black formatter check
      run: black --check src tests
    
    - name: Run isort import sorting check
      run: isort --check-only src tests
    
    - name: Run flake8 linter
      run: flake8 src tests --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run mypy type checker
      run: mypy src --strict --ignore-missing-imports
    
    - name: Run pydocstyle docstring checker
      run: pydocstyle src --convention=google
    
    - name: Run xenon complexity checker
      run: xenon --max-absolute B --max-modules A --max-average A src
    
    - name: Run vulture dead code detector
      run: vulture src --min-confidence 80
    
    - name: Run radon complexity analyzer
      run: radon cc src --min B --show-complexity --average

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[security]
    
    - name: Run bandit security linter
      run: bandit -r src -f json -o bandit-report.json
    
    - name: Run safety vulnerability scanner
      run: safety check --json --output safety-report.json
    
    - name: Run semgrep security scanner
      run: semgrep --config=auto --json --output=semgrep-report.json src
    
    - name: Run detect-secrets
      run: detect-secrets scan --baseline .secrets.baseline
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  # Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]
    
    - name: Run unit tests
      run: pytest -m unit --cov=src --cov-report=xml --cov-report=html
    
    - name: Run integration tests
      run: pytest -m integration --cov=src --cov-report=xml --cov-report=html
    
    - name: Run end-to-end tests
      run: pytest -m e2e --cov=src --cov-report=xml --cov-report=html
    
    - name: Run performance tests
      run: pytest -m performance --benchmark-only
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]
    
    - name: Run performance tests
      run: pytest -m performance --benchmark-json=benchmark.json
    
    - name: Run memory profiling
      run: |
        python -m memory_profiler src/main.py &
        sleep 10
        pkill -f memory_profiler
    
    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: benchmark.json

  # Dependency Scanning
  dependencies:
    name: Dependency Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run pip-audit
      run: pip-audit --desc --format=json --output=pip-audit-report.json
    
    - name: Run pipdeptree
      run: pipdeptree --json --output=pipdeptree.json
    
    - name: Check for outdated packages
      run: pip list --outdated --format=json --output=outdated-packages.json
    
    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-reports
        path: |
          pip-audit-report.json
          pipdeptree.json
          outdated-packages.json

  # Documentation Quality
  documentation:
    name: Documentation Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Check docstring coverage
      run: interrogate src --fail-under=80
    
    - name: Check for missing docstrings
      run: pydocstyle src --convention=google
    
    - name: Generate API documentation
      run: |
        sphinx-build -b html docs docs/_build/html
        sphinx-build -b linkcheck docs docs/_build/linkcheck
    
    - name: Check for broken links
      run: |
        find docs -name "*.md" -exec markdown-link-check {} \;

  # Frontend Quality (if applicable)
  frontend-quality:
    name: Frontend Quality
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'frontend/') || contains(github.event.head_commit.added, 'frontend/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint
    
    - name: Run Prettier check
      run: |
        cd frontend
        npm run format:check
    
    - name: Run TypeScript check
      run: |
        cd frontend
        npm run type-check
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:ci
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # Docker Quality
  docker-quality:
    name: Docker Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Run Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: backend/Dockerfile
        format: json
        output-file: hadolint-report.json
    
    - name: Build Docker image
      run: |
        docker build -t tactics-master:test backend/
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'tactics-master:test'
        format: 'json'
        output: 'trivy-report.json'
    
    - name: Upload Docker reports
      uses: actions/upload-artifact@v3
      with:
        name: docker-reports
        path: |
          hadolint-report.json
          trivy-report.json

  # Code Coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]
    
    - name: Run tests with coverage
      run: |
        pytest --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: htmlcov/

  # Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [quality, security, test, performance, dependencies, documentation]
    if: always()
    
    steps:
    - name: Check quality results
      run: |
        echo "Quality checks completed"
        echo "Security scans completed"
        echo "Tests completed"
        echo "Performance tests completed"
        echo "Dependency scans completed"
        echo "Documentation checks completed"
    
    - name: Quality Gate Summary
      run: |
        echo "## Quality Gate Results" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality: ${{ needs.quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance: ${{ needs.performance.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Dependencies: ${{ needs.dependencies.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Documentation: ${{ needs.documentation.result }}" >> $GITHUB_STEP_SUMMARY
